@model Employee

@{
    ViewBag.Title = "Create Employee";
}

<form asp-controller="home" asp-action="create" method="post" class="mt-3">
    <div class="form-group row">
        <label asp-for="Name" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <input asp-for="Name" class="form-control" placeholder="Name">
        </div>
    </div>
    <div class="form-group row">
        <label asp-for="Email" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <input asp-for="Email" class="form-control" placeholder="Email">
        </div>
    </div>

    <div class="form-group row">
        <label asp-for="Department" class="col-sm-2 col-form-label"></label>
        <div class="col-sm-10">
            <select asp-for="Department" class="custom-select mr-sm-2"
                    asp-items="Html.GetEnumSelectList<Dept>()"></select>
        </div>
    </div>

    <div class="form-group row">
        <div class="col-sm-10">
            <button type="submit" class="btn btn-primary">Create</button>
        </div>
    </div>
</form>

@*Model Binding Complex Types
Model Binding also works with complex types such as Customer, Order, Employee etc. Consider this "Create Employee Form".
When the above form is posted to the server, the values in the form are mapped to the Employee object parameter of the  
Create() action method.
Model binder in asp.net core binds the posted form values to the properties of the Employee object that is passed as a 
parameter to the Create() action method.
The value in the input element that has the name attribute set to "Name" is mapped to the Name property of the Employee object
Similarly value in the input element with name "Email" is mapped to Email property of the Employee object
The same is true for Department*@
